#!/bin/bash
#make jum directory in slate
mkdir jum

#create an environment for jum
conda create -n jum -c bioconda samtools=1.3.1 bedtools=2.26.0 star r-base bioconductor-dexseq
conda activate jum

#Install Perl with required modules -- Array::Utils and Statistics::Descriptive
wget -O- http://cpanmin.us | perl - -l ~/perl5 App::cpanminus local::lib
module load perl
cpanm Array::Utils 
cpanm Statistics::Descriptive

#Open R studio 4.2.1 (has to be 4.2.X or up)
$ R
> if (!require("BiocManager", quietly = TRUE))
> install.packages("BiocManager")
> BiocManager::install(version = "3.16")
> BiocManager::install("DEXSeq")

#Download JUM package from here (https://github.com/qqwang-berkeley/JUM/releases)
#I downloaded JUM_3.0.0.tar.gz to desktop 
#copy to slate directory from Desktop
scp JUM_3.0.0.tar.gz /N/slate/emierdma/jum

#in jum directory, unzip JUM_3.0.0.tar.gz
tar -xf JUM_3.0.0.tar

# Copy and paste read files (.fastq) into jum directory

#Assign Variables
ASSEMBLY='ftp://ftp.wormbase.org/pub/wormbase/releases/WS275/species/c_elegans/PRJNA13758/c_elegans.PRJNA13758.WS275.genomic.fa.gz'
ANNOTATION='ftp://ftp.wormbase.org/pub/wormbase/releases/WS275/species/c_elegans/PRJNA13758/c_elegans.PRJNA13758.WS275.canonical_geneset.gtf.gz'

# Generate STAR Genome Index 
# Make a directory to store the genome files
mkdir -p genome/index


# Download and unpack the genome assembly.
curl $ASSEMBLY | gunzip > ./genome/assembly.fasta


# Download and unpack the genome annotation.
curl $ANNOTATION | gunzip > ./genome/annotation.gtf


# Create the STAR genome index
STAR --runThreadN 3 --runMode genomeGenerate --genomeDir genome/index --genomeFastaFiles genome/assembly.fasta --sjdbGTFfile genome/annotation.gtf --sjdbOverhang 99

# 1st pass mapping and copy selected STAR outputs from the 1st mapping to a folder named as 1st_SJ 
STAR --runThreadN 3 --genomeDir genome/index --outFileNamePrefix ctrl_1 --readFilesIn GSF3037-Hundley-EE_N2_germlines_5-1_S1_R1_001.fastq --outSJfilterReads Unique
STAR --runThreadN 3 --genomeDir genome/index --outFileNamePrefix ctrl_2 --readFilesIn GSF3037-Hundley-EE_N2_germlines_5-2_S2_R1_001.fastq --outSJfilterReads Unique
STAR --runThreadN 3 --genomeDir genome/index --outFileNamePrefix ctrl_3 --readFilesIn GSF3037-Hundley-EE_N2_germlines_5-3_S3_R1_001.fastq --outSJfilterReads Unique
STAR --runThreadN 3 --genomeDir genome/index --outFileNamePrefix treat_1 --readFilesIn GSF3037-Hundley-EE_adr2_germlines_5-2_S4_R1_001.fastq --outSJfilterReads Unique
STAR --runThreadN 3 --genomeDir genome/index --outFileNamePrefix treat_2 --readFilesIn GSF3037-Hundley-EE_adr2_germlines_5-3_S5_R1_001.fastq --outSJfilterReads Unique
STAR --runThreadN 3 --genomeDir genome/index --outFileNamePrefix treat_3 --readFilesIn GSF3037-Hundley-EE_adr2_germlines_5-4_S6_R1_001.fastq --outSJfilterReads Unique
mkdir 1st_SJ
rm *Aligned.out.sam
mv ctrl* 1st_SJ
mv treat* 1st_SJ

# 2nd pass mapping 
STAR --runThreadN 3 --genomeDir genome/index --outFileNamePrefix ctrl1 --readFilesIn GSF3037-Hundley-EE_N2_germlines_5-1_S1_R1_001.fastq --outSJfilterReads Unique --outSAMstrandField intronMotif --outFilterMultimapNmax 1 -sjdbFileChrStartEnd 1st_SJ/ctrl_1SJ.out.tab 1st_SJ/ctrl_2SJ.out.tab 1st_SJ/ctrl_3SJ.out.tab 1st_SJ/treat_1SJ.out.tab 1st_SJ/treat_2SJ.out.tab 1st_SJ/treat_3SJ.out.tab
STAR --runThreadN 3 --genomeDir genome/index --outFileNamePrefix ctrl2 --readFilesIn GSF3037-Hundley-EE_N2_germlines_5-2_S2_R1_001.fastq --outSJfilterReads Unique --outSAMstrandField intronMotif --outFilterMultimapNmax 1 -sjdbFileChrStartEnd 1st_SJ/ctrl_1SJ.out.tab 1st_SJ/ctrl_2SJ.out.tab 1st_SJ/ctrl_3SJ.out.tab 1st_SJ/treat_1SJ.out.tab 1st_SJ/treat_2SJ.out.tab 1st_SJ/treat_3SJ.out.tab
STAR --runThreadN 3 --genomeDir genome/index --outFileNamePrefix ctrl3 --readFilesIn GSF3037-Hundley-EE_N2_germlines_5-3_S3_R1_001.fastq --outSJfilterReads Unique --outSAMstrandField intronMotif --outFilterMultimapNmax 1 -sjdbFileChrStartEnd 1st_SJ/ctrl_1SJ.out.tab 1st_SJ/ctrl_2SJ.out.tab 1st_SJ/ctrl_3SJ.out.tab 1st_SJ/treat_1SJ.out.tab 1st_SJ/treat_2SJ.out.tab 1st_SJ/treat_3SJ.out.tab
STAR --runThreadN 3 --genomeDir genome/index --outFileNamePrefix treat1 --readFilesIn GSF3037-Hundley-EE_adr2_germlines_5-2_S4_R1_001.fastq --outSJfilterReads Unique --outSAMstrandField intronMotif --outFilterMultimapNmax 1 -sjdbFileChrStartEnd 1st_SJ/ctrl_1SJ.out.tab 1st_SJ/ctrl_2SJ.out.tab 1st_SJ/ctrl_3SJ.out.tab 1st_SJ/treat_1SJ.out.tab 1st_SJ/treat_2SJ.out.tab 1st_SJ/treat3SJ.out.tab
STAR --runThreadN 3 --genomeDir genome/index --outFileNamePrefix treat2 --readFilesIn GSF3037-Hundley-EE_adr2_germlines_5-3_S5_R1_001.fastq --outSJfilterReads Unique --outSAMstrandField intronMotif --outFilterMultimapNmax 1 -sjdbFileChrStartEnd 1st_SJ/ctrl_1SJ.out.tab 1st_SJ/ctrl_2SJ.out.tab 1st_SJ/ctrl_3SJ.out.tab 1st_SJ/treat_1SJ.out.tab 1st_SJ/treat_2SJ.out.tab 1st_SJ/treat3SJ.out.tab
STAR --runThreadN 3 --genomeDir genome/index --outFileNamePrefix treat3 --readFilesIn GSF3037-Hundley-EE_adr2_germlines_5-4_S6_R1_001.fastq --outSJfilterReads Unique --outSAMstrandField intronMotif --outFilterMultimapNmax 1 -sjdbFileChrStartEnd 1st_SJ/ctrl_1SJ.out.tab 1st_SJ/ctrl_2SJ.out.tab 1st_SJ/ctrl_3SJ.out.tab 1st_SJ/treat_1SJ.out.tab 1st_SJ/treat_2SJ.out.tab 1st_SJ/treat3SJ.out.tab

# Convert and sort the resulted alignment files (please use the exact naming nomenclature as shown below). Here we show ctrl 1 sample as an example but users need to do this for all the samples:
samtools view -bS ctrl1Aligned.out.sam > ctrl1Aligned.out.bam
samtools sort -o ctrl1Aligned.out_sorted.bam -T ctrl1_temp ctrl1Aligned.out.bam 
samtools index ctrl1Aligned.out_sorted.bam

samtools view -bS ctrl2Aligned.out.sam > ctrl2Aligned.out.bam
samtools sort -o ctrl2Aligned.out_sorted.bam -T ctrl2_temp ctrl2Aligned.out.bam 
samtools index ctrl2Aligned.out_sorted.bam

samtools view -bS ctrl3Aligned.out.sam > ctrl3Aligned.out.bam
samtools sort -o ctrl3Aligned.out_sorted.bam -T ctrl3_temp ctrl3Aligned.out.bam 
samtools index ctrl3Aligned.out_sorted.bam

samtools view -bS treat1Aligned.out.sam > treat1Aligned.out.bam
samtools sort -o treat1Aligned.out_sorted.bam -T treat1_temp treat1Aligned.out.bam 
samtools index treat1Aligned.out_sorted.bam

samtools view -bS treat2Aligned.out.sam > treat2Aligned.out.bam
samtools sort -o treat2Aligned.out_sorted.bam -T treat2_temp treat1Aligned.out.bam 
samtools index treat2Aligned.out_sorted.bam

samtools view -bS treat3Aligned.out.sam > treat3Aligned.out.bam
samtools sort -o treat3Aligned.out_sorted.bam -T treat3_temp treat1Aligned.out.bam 
samtools index treat3Aligned.out_sorted.bam

rm *Aligned.out.bam

# Under your working folder, you should have the following input files ready for JUM analysis ("*" indicates ctrl1, ctrl2, ctrl3, treat1, treat2 and treat3):
# *Aligned.out.sam files
# *SJ.out.tab files
# *Aligned.out_sorted.bam files


##### Running JUM_A.sh #####

# Make sure all the scripts are now in /N/slate/emierdma/jum/JUM_3.0.0 
# Run JUM_A.sh (Make sure sample names for condition 1 (ctrl) is alphabetically before those for condition 2 (treat)). I set N2 as ctrl and adr-2(-) as treat. 

bash /N/slate/emierdma/jum/JUM_3.0.0/JUM_A.sh --Folder /N/slate/emierdma/jum/JUM_3.0.0 --JuncThreshold 5 --Condition1_fileNum_threshold 2 --Condition2_fileNum_threshold 2 --IRthreshold 5 --Readlength 100 --Thread 3 --Condition1SampleName ctrl1,ctrl2,ctrl3 --Condition2SampleName treat1,treat2,treat3

# JUM_A.sh will generate a new folder called JUM_diff/ with results for downstream analysis.



##### Running JUM_B.sh #####

# Make changes to the experiment design file before running Rscript 

cd /N/slate/emierdma/jum/temp_JUM_A_run/JUM_3.0.0/

vim experiment_design.txt 

i

      condition
ctrl1 control
ctrl2 control
ctrl3 control
treat1 treatment
treat2 treatment
treat3 treatment

esc :wq

# The spaces should be all tab so that these are two different columns when opened in excel 

# Copy and paste this file into JUM_diff folder 

scp experiment_design.txt /N/slate/emierdma/jum/JUM_diff


# Enter the JUM_diff/ folder and run the R script with a user-provided experiment design file

cd JUM_diff/

module load bioconductor 

Rscript /N/slate/emierdma/jum/JUM_3.0.0/R_script_JUM.R experiment_design.txt > outputFile.Rout 2> errorFile.Rout

# R_script_JUM.R will output a file called AS_differential.txt. Make sure that Step 2 successfully generates a new file called AS_differential.txt in the JUM_diff/ folder. Otherwise you can refer to the files outputFile.Rout and errorFile.Rout for troubleshooting  


# Now run JUM_B.sh in the JUM_diff/ folder as follows: (It is advised to use p value curoff < 0.05. I used 1 for initial running)

module load perl

bash /N/slate/emierdma/jum/JUM_3.0.0/JUM_B.sh --Folder /N/slate/emierdma/jum/JUM_3.0.0 --Test pvalue --Cutoff 0.05 --TotalFileNum 6 --Condition1_fileNum_threshold 2 --Condition2_fileNum_threshold 2 --Condition1SampleName ctrl1,ctrl2,ctrl3 --Condition2SampleName treat1,treat2,treat3

# JUM_B.sh will generate a new folder called FINAL_JUM_OUTPUT_$Test_$Cutoff that contains the results for downstream analysis.



##### Running JUM_C.sh #####

# Before you start, make sure you download annotation_transcriptname.gtf.refflat.txt file on Onedrive (Boyoon Yang > Bioinformatics > JUM folder) and put it in the JUM_diff/FINAL_JUM_OUTPUT_pvalue_1 folder
# Note that this refflat file has transcript name in both column 1 and 2. Ideally, column 1 should have gene names instead so this has to be fixed in the future (had errors when putting gene names in column 1)
# Run JUM_C.sh in the folder FINAL_JUM_OUTPUT_$Test_$Cutoff as follows:

bash /N/slate/emierdma/jum/JUM_3.0.0/JUM_C.sh --Folder /N/slate/emierdma/jum/JUM_3.0.0 --Test pvalue --Cutoff 1 --TotalCondition1FileNum 3 --TotalCondition2FileNum 3 --REF annotation.gtf.refflat.txt

# As soon as JUM_C.sh starts running, all output files from JUM_B.sh is overwritten by JUM_C.sh. If you face any error in this step, or wish to rerun JUM_C.sh, you will have to delete the output folder of JUM_B.sh, “FINAL_JUM_OUTPUT_pvalue_1” and start over from running JUM_B.sh. 
# JUM_C.sh will output files with the suffix: *_final_simplified.txt and *_final_detailed.txt. These are the final output files from JUM.



# After completion, copy and paste the output files to view results 


